package {{.Pkg}}

import (
	"context"
	"{{.ModName}}/dao"
	"{{.ModName}}/initial"

	"github.com/abulo/ratel/v3/stores/sql"
	"github.com/abulo/ratel/v3/util"
	"github.com/pkg/errors"
	{{- if .Page}}
	"github.com/spf13/cast"
	{{- end}}
)
// {{.Table.TableName}} {{.Table.TableComment}}

{{- range .Method}}
{{- if eq .Type "Create"}}
// {{.Name}} 创建数据
func {{.Name}}(ctx context.Context,data dao.{{CamelStr .Table.TableName}})(res int64, err error){
	db := initial.Core.Store.LoadSQL("mysql").Write()
	err = db.WithContext(ctx).Model(&dao.{{CamelStr .Table.TableName}}{}).Create(&data).Error
	res = cast.ToInt64(data.Id)
	return
}
{{- else if eq .Type "Update"}}
// {{.Name}} 更新数据
func {{.Name}}(ctx context.Context,{{Helper .Primary.AlisaColumnName}} {{.Primary.DataTypeMap.Default}},data dao.{{CamelStr .Table.TableName}})(res int64, err error){
	db := initial.Core.Store.LoadSQL("mysql").Write()
	result := db.WithContext(ctx).Model(&dao.{{CamelStr .Table.TableName}}{}).Where("{{.Primary.ColumnName}} = ?", {{Helper .Primary.AlisaColumnName}}).Updates(data)
	return result.RowsAffected, result.Error
}
{{- else if eq .Type "Show"}}
// {{.Name}} 查询单条数据
func {{.Name}}(ctx context.Context,{{Helper .Primary.AlisaColumnName}} {{.Primary.DataTypeMap.Default}})(res dao.{{CamelStr .Table.TableName}},err error){
	db := initial.Core.Store.LoadSQL("mysql").Read()
	err = db.WithContext(ctx).Model(&dao.{{CamelStr .Table.TableName}}{}).Where("{{.Primary.ColumnName}} = ?", {{Helper .Primary.AlisaColumnName}}).Find(&res).Error
	return
}
{{- else if eq .Type "Drop"}}
// {{.Name}} 清理数据
func {{.Name}}(ctx context.Context,{{Helper .Primary.AlisaColumnName}} {{.Primary.DataTypeMap.Default}})(res int64,err error){
	db := initial.Core.Store.LoadSQL("mysql").Write()
	result := db.WithContext(ctx).Where("{{.Primary.ColumnName}} = ?", {{Helper .Primary.AlisaColumnName}}).Delete(&dao.{{CamelStr .Table.TableName}}{})
	return result.RowsAffected, result.Error
}
{{- else if eq .Type "Delete"}}
// {{.Name}} 删除数据
func {{.Name}}(ctx context.Context,{{Helper .Primary.AlisaColumnName}} {{.Primary.DataTypeMap.Default}})(res int64,err error){
	db := initial.Core.Store.LoadSQL("mysql").Write()
	{{- if .SoftDelete}}
	data := make(map[string]any)
	data["deleted"] = 1
	result := db.WithContext(ctx).Model(&dao.{{CamelStr .Table.TableName}}{}).Where("{{.Primary.ColumnName}} = ?", {{Helper .Primary.AlisaColumnName}}).Updates(data)
	{{- else}}
	result := db.WithContext(ctx).Where("{{.Primary.ColumnName}} = ?", {{Helper .Primary.AlisaColumnName}}).Delete(&dao.{{CamelStr .Table.TableName}}{})
	{{- end}}
	return result.RowsAffected, result.Error
}
{{- else if eq .Type "Recover"}}
{{- if .SoftDelete}}
// {{.Name}} 恢复数据
func {{.Name}}(ctx context.Context,{{Helper .Primary.AlisaColumnName}} {{.Primary.DataTypeMap.Default}})(res int64,err error){
	db := initial.Core.Store.LoadSQL("mysql").Write()
	data := make(map[string]any)
	data["deleted"] = 0
	result := db.WithContext(ctx).Model(&dao.{{CamelStr .Table.TableName}}{}).Where("{{.Primary.ColumnName}} = ?", {{Helper .Primary.AlisaColumnName}}).Updates(data)
	return result.RowsAffected, result.Error
}
{{- end}}
{{- else if eq .Type "Item"}}
// {{.Name}} 查询单条数据
func {{.Name}}(ctx context.Context,condition map[string]any)(res dao.{{CamelStr .Table.TableName}},err error){
	if util.Empty(condition) {
		err = errors.New("condition is empty")
		return
	}
	db := initial.Core.Store.LoadSQL("mysql").Read()
	builder := db.WithContext(ctx).Model(&dao.{{CamelStr .Table.TableName}}{})
	{{Convert .Condition}}
	err = builder.Find(&res).Error
	return
}
{{- else if eq .Type "List"}}
// {{.Name}} 查询列表数据
func {{.Name}}(ctx context.Context,condition map[string]any)(res []dao.{{CamelStr .Table.TableName}}, err error){
	db := initial.Core.Store.LoadSQL("mysql").Read()
	builder := db.WithContext(ctx).Model(&dao.{{CamelStr .Table.TableName}}{})
	{{Convert .Condition}}
	{{- if .Page}}
	if val, ok := condition["pagination"]; ok {
		pagination := val.(*sql.Pagination)
		if val, err := pagination.GetOffset(); err == nil {
			builder.Offset(cast.ToInt(val))
		}
		if val, err := pagination.GetLimit(); err == nil {
			builder.Limit(cast.ToInt(val))
		}
	}
	{{- end}}
	builder.Order("{{.Primary.ColumnName}}")
	err = builder.Find(&res).Error
	return
}
{{- if .Page}}
// {{.Name}}Total 查询列表数据总量
func {{.Name}}Total(ctx context.Context,condition map[string]any)(res int64,err error){
	db := initial.Core.Store.LoadSQL("mysql").Read()
	builder := db.WithContext(ctx).Model(&dao.{{CamelStr .Table.TableName}}{})
	{{Convert .Condition}}
	err = builder.Count(&res).Error
	return
}
{{- end}}
{{- end}}
{{- end}}